{"version":3,"file":"static/js/432.fbd99ee2.chunk.js","mappings":"uQAyGA,UA3FqB,WACnB,IAAAA,GAKIC,EAAAA,EAAAA,MAJFC,EAAQF,EAARE,SACAC,EAAYH,EAAZG,aACAC,EAAKJ,EAALI,MACaC,EAAML,EAAnBM,UAAaD,OAETE,GAAWC,EAAAA,EAAAA,MAQjB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAG,CAACC,MAAO,CAAEC,KAAM,OAAQC,GAAI,OAASC,GAAI,EAAGC,GAAI,GAAGC,UACrDC,EAAAA,EAAAA,MAAA,QAAMC,SAAUf,GARH,SAAAgB,GACfC,QAAQC,IAAIF,GACZZ,GAASe,EAAAA,EAAAA,IAAcH,IACvBf,GACF,IAI2CY,SAAA,EACrCC,EAAAA,EAAAA,MAACM,EAAAA,GAAW,CAACC,UAAWnB,EAAOoB,MAAMT,SAAA,EACnCP,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAACC,QAAQ,QAAOX,SAAC,YAC3BP,EAAAA,EAAAA,KAACmB,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJC,GAAG,QACHC,KAAK,SACD7B,EAAS,QAAS,CAAE8B,SAAU,8BAEpCvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAAjB,SACdX,EAAOoB,OAASpB,EAAOoB,MAAMS,cAIlCjB,EAAAA,EAAAA,MAACM,EAAAA,GAAW,CAACC,UAAWnB,EAAO8B,KAAKnB,SAAA,EAClCP,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAACC,QAAQ,OAAMX,SAAC,WAC1BP,EAAAA,EAAAA,KAACmB,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJC,GAAG,OACHC,KAAK,QACD7B,EAAS,OAAQ,CAAE8B,SAAU,8BAEnCvB,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAAjB,SACdX,EAAO8B,MAAQ9B,EAAO8B,KAAKD,cAIhCjB,EAAAA,EAAAA,MAACM,EAAAA,GAAW,CAACC,UAAWnB,EAAO+B,SAASpB,SAAA,EACtCP,EAAAA,EAAAA,KAACiB,EAAAA,EAAS,CAACC,QAAQ,WAAUX,SAAC,eAC9BP,EAAAA,EAAAA,KAACmB,EAAAA,GAAKC,EAAAA,EAAAA,GAAA,CACJC,GAAG,WACHC,KAAK,YACD7B,EAAS,WAAY,CACvB8B,SAAU,yBACVK,UAAW,CACTC,MAAO,EACPJ,QAAS,iDAIfzB,EAAAA,EAAAA,KAACwB,EAAAA,GAAgB,CAAAjB,SACdX,EAAO+B,UAAY/B,EAAO+B,SAASF,cAIxCzB,EAAAA,EAAAA,KAAC8B,EAAAA,EAAM,CAACxB,GAAI,EAAGyB,YAAY,OAAOT,KAAK,SAAQf,SAAC,gBA6BxD,C","sources":["pages/RegisterPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useDispatch } from 'react-redux';\nimport { registerThunk } from 'redux/authReducer';\n\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Button,\n  Box,\n} from '@chakra-ui/react';\n\nconst RegisterPage = () => {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n  const dispatch = useDispatch();\n\n  const onSubmit = data => {\n    console.log(data);\n    dispatch(registerThunk(data));\n    reset();\n  };\n\n  return (\n    <Box width={{ base: '100%', md: '50%' }} ml={0} mt={10}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <FormControl isInvalid={errors.email}>\n          <FormLabel htmlFor=\"email\">Email:</FormLabel>\n          <Input\n            id=\"email\"\n            type=\"email\"\n            {...register('email', { required: 'This field is required' })}\n          />\n          <FormErrorMessage>\n            {errors.email && errors.email.message}\n          </FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={errors.name}>\n          <FormLabel htmlFor=\"name\">Name:</FormLabel>\n          <Input\n            id=\"name\"\n            type=\"text\"\n            {...register('name', { required: 'This field is required' })}\n          />\n          <FormErrorMessage>\n            {errors.name && errors.name.message}\n          </FormErrorMessage>\n        </FormControl>\n\n        <FormControl isInvalid={errors.password}>\n          <FormLabel htmlFor=\"password\">Password:</FormLabel>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            {...register('password', {\n              required: 'This field is required',\n              minLength: {\n                value: 7,\n                message: 'Password must have at least 7 characters',\n              },\n            })}\n          />\n          <FormErrorMessage>\n            {errors.password && errors.password.message}\n          </FormErrorMessage>\n        </FormControl>\n\n        <Button mt={4} colorScheme=\"blue\" type=\"submit\">\n          Sign Up\n        </Button>\n      </form>\n    </Box>\n\n    // <form onSubmit={handleSubmit(onSubmit)}>\n    //   <label>\n    //     <span>Email:</span>\n    //     <input {...register('email', { required: true })} type=\"email\" />\n    //     {errors.email && <span>This field is required</span>}\n    //   </label>\n    //   <label>\n    //     <span>Name:</span>\n    //     <input {...register('name', { required: true })} type=\"text\" />\n    //     {errors.name && <span>This field is required</span>}\n    //   </label>\n    //   <label>\n    //     <span>Password:</span>\n    //     <input\n    //       {...register('password', { required: true, minLength: 7 })}\n    //       type=\"password\"\n    //     />\n    //     {errors.password && <span>This field is required</span>}\n    //   </label>\n\n    //   <button type=\"submit\">Sign Up</button>\n    // </form>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["_useForm","useForm","register","handleSubmit","reset","errors","formState","dispatch","useDispatch","_jsx","Box","width","base","md","ml","mt","children","_jsxs","onSubmit","data","console","log","registerThunk","FormControl","isInvalid","email","FormLabel","htmlFor","Input","_objectSpread","id","type","required","FormErrorMessage","message","name","password","minLength","value","Button","colorScheme"],"sourceRoot":""}